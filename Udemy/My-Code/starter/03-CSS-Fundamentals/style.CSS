/* 
* This file is an External CSS.

Imp:- CSS stands for Cascading Style Sheets.

$ CSS describes the visual style and presentation of the content written in HTML.
$ CSS consists of countless properties that developers use to format the content: properties about font, text, spacing, layout, etc.
# h1 -> selector ; font-size -> property ; 20px -> value ;
# font-size: 20px -> Declaration/style (Property + value = Declaration) ;
# Many Declarations/Styles = Declaration Block ;
# Selector + Declaration Block = CSS Rule ;
@ Default font size is 16px in a page.

Imp:- Color Models.

** RGB Model :- Red, Green and Blue. => Each of the base colors can take a value between 0 to 255, which leads to 16.8 million colors.
 
 * For Red -> 255, 0, 0 (R, G, B)
 * For Green-> 0, 255, 0 (R, G, B)
 * For Blue -> 0, 0, 255 (R, G, B)

 * For White -> 255, 255, 255 (R, G, B)
 * For Black -> 0, 0, 0 (R, G, B)

 * For Magenta (Red + Blue) -> 255, 0, 255 (R, G, B)
 * For Yellow (Red + Green) -> 255, 255, 0 (R, G, B)
 * For Cyan (Green + Blue) -> 0, 255, 255 (R, G, B)

 ** RGB / RGBA Notation :-

 * Regular RGB Model => rgb(0, 255, 255) => Cyan Color || rgb(244, 179, 63) => Orange Color
 * RGB with Transparency ("alpha") => rgba(0, 255, 255, 0.3) => Transparent Cyan || rgba(244, 179, 63, 0.7) => Transparent Orange.

 **HEXADECIMAL Notation :-

 * Instead of using a scale from 0 to 255, we go from 0 to ff (255 in Hexadecimal numbers)
 * #00ffff => Cyan Color

 * Shorthand, when all color are identical pairs -> #0ff => Cyan Color using shorthand

 * In practice, we mostly use hexadecimal colors, and rgba when we need transparency.
 
 ** SHADES OF GREY :-

 * When colors in all 3 channels are the same, we get a grey color.
 * There are 256 pure grays to choose from.

 * rgb(0, 0, 0) / #000000 / #000
 * rgb(69 , 69, 69) / #444444 / #444
 * rgb(125 , 125, 125) / #7d7d7d
 * rgb(183, 183, 183) / #b7b7b7
 * rgb(255 , 255, 255) / #ffffff / #fff

 IMP:- 

 Notes:-

 #     ⬆   Highest Priority
 #    ❕      
 #    ❕                          
 #    ❕                          
 #    ❕                          
 #    ❕                          
 #    ❕                          5.) Declarations marked ! important
 #    ❕                        ⬇️   No Important ! ?
 #    ❕                          4.) Inline style (style attribute in HTML)
 #    ❕                        ⬇️   No Inline Style ?
 #    ❕                          3.) ID # Selector
 #    ❕                        ⬇️   No # Selector ?
 #    ❕                          2.) Class (.) or Pseudo-Class (:) selector
 #    ❕                        ⬇️   No . or : selector ?
 #    ❕                          1.) Element Selector (p, div, li, etc.)
 #    ❕                        ⬇️   No element selector ?
 #    ❕                          0.) Universal Selector
 #    ❕                          
 #    ❕                          
 #    ❕                          
 #    ❕                          
 #    ❕                          
 #    ❕                          
 #     ⬇  Lowest Priority

 ! Important: Based on Selector Specificity the priority changes. Complex selectors are applied on priority.

---> CSS Box Model <---

  ----> Content: Text, images, etc.
  ----> Border: A line around the element,still inside of the element.
  ----> Padding: Invisible space around the content, inside the ::-webkit-progress-inner-element.
  ----> Margin: Space outside of the element, between elements.
  ----> Fill area: Area that gets filled with background color or background image (the whole visible element part is covered here) 

---> Element Height and width calculation:

  ----> Final element width = left border + left padding + width + right padding + right border
  ----> Final element height = top border + top padding + height + bottom padding + bottom border

  * We can specify all these values using CSS properties.
  * This is the default behavior, but we can change it.

  -> check .main-header, li, li:last-child, body(wrong approach as it doesn't get inherited), *, etc for example.

 Imp: Remember collapsing margin

---> Adding Dimensions <--- 
  -> check aside for examples on it.


---> Types of Boxes <---
  --> Block-Level Elements (Block-Level Boxes.)
    # Elements are formatted visually as blocks.
    # Elemets occupy 100% of parent element's width, no matter the content.
    # Elements are stacked vertically by default, one after another.
    # The box-model applies as showed earlier.
    * Ex: body, main, header, footer, section, h1-h6, etc. 
    @ With CSS:- display: block;

  --> Inline Elements (Inline Boxes.)
    # Occupies only the space necessary for its content.
    # Causes no line-breaks after or before the element.
    # Box model applies in a different way: heights and widths do not apply.
    ! Paddings and margins are applied only horizontally (left and right)
    * Ex: Strong, Emphasize, a, img, button etc. 
    @ With CSS:- display: inline;

  --> Inline-Block Boxes
    # Looks like inline from outside, behaves like block-level on the inside.
    # Occupies only content's space.
    # Causes no line-breaks.
    # Box-model applies as showed.
    @ With CSS:- display: inline-block;

---> Normal Flow vs Absolute Positioning
  --> Normal Flow
    # Default positioning
    # Element is "in Flow"
    # Elements are simply laid out according to their order in the HTML code
    @ Default Positioning:- position: relative;

  --> Absolute Positioning
    # Element is removed from the normal flow: "out of flow"
    # No impact on surrounding elements, might overlap them
    # We use top, bottom, left, or right to offset the element from its relatively positioned container
    @ Absoulte Positioning:- position: absolute;

---> After and Before Pseudo element
  # ::before is used to place it at the beginning of the element, 
  # ::after is used to place it at the end of the element

----> What Does "Layout" Mean ?.

  --> Layout is the way text, images and other content is placed and arranged on a webpage.
  --> Layout gives the page a visual structure, into which we place our content.
  --> Building a Layout: Arranging page elements into a visual structure, instead of simply having them placed one after another (normal flow).

  --->Page Layout vs Component Layout.

  -->Page Layout is a layout design in which the design of the complete page is done. A Page Layout is the combination of component layout.
  -->Component Layout is a layout design in which the design of a specific element(component) is done.

  ---> Float Layouts:

  --> The old way of building layouts of all sizes, using the float CSS property. Still used, but getting outdated fast.

  --->Flexbox:

  --> Modern way of laying out elements in a 1-dimensional row without using floats. Perfect for component layouts.

  --->CSS Grid:

  --> For laying out element in a fully-fledged 2-dimensional grid. Perfect for page layouts and complex components.

*/

/* * Combining Selectors */

h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  color: #444;
}

h1,
h2,
h3 {
  color: #1098ad;
}

/* * Normal Selectors */

h1 {
  /* color: blue; */
  font-size: 26px;
  /* font-family: sans-serif; */
  text-transform: uppercase;
  font-style: italic;
  /* color: #1098ad; */
}

h2 {
  font-size: 40px;
  /* font-family: sans-serif; */
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  /* font-family: sans-serif; */
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  /* font-family: sans-serif; */
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  /* font-family: sans-serif; */
  line-height: 1.5;
  margin-bottom: 15px;
  /* display: inline; */ /* -> We don't use it as it makes para as a single line which is weird and does'nt make sense here*/
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
  /* font-family: sans-serif; */
  /* display: inline; */
}

/* body {
} */

article {
  /* background-color: blanchedalmond;
  border: 8px double burlywood; ---> width style color <--- */
  margin-bottom: 60px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad; /* * width, style, color -> Shorthand Property*/
  border-bottom: 5px solid #1098ad;
  /* padding-top: 50px;
  padding-bottom: 50px; */
  padding: 50px 0;
  width: 500px;
}

/* ul {
  list-style: none;
} */

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* top: 50px; */
  /* left: 50px; */
  bottom: 50px;
  right: 50px;
}

nav {
  font-size: 18px;
  /* text-align: center; */
}

/* * Descendant Selector */

/* footer p {
  font-size: 16px;
} */

/* article header p {
  font-style: italic;
} */

/* * ID and Class Selector */

/* * Using ID selector (#) */
#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

/* * Class Selector (.)*/

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
}

.main-header {
  background-color: #f7f7f7;
  /*
  padding: 20px;
  padding-left: 40px;
  padding-right: 40px;
  */
  padding: 20px 40px; /* ---> top, bottom and left and right <---*/
  /* border: 2px solid blueviolet; */
  margin-bottom: 60px;
  /* height: 80px;  */ /* -> We Don't add it because it causes conflicts with box type(Inline changed to Block) heigths*/
  margin-top: 10px;
}

/* .first-li {
  font-weight: bold;
} */

.post-header {
  margin-bottom: 40px;
  /* position: relative; */
}

.post-img {
  /* width: 800px; */
  width: 100%;
  height: auto;
  /* margin: 100px; */ /* !img are inline-block */
}

/* --> Used to center <-- */
.container {
  width: 800px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
  /* position: relative; */
}

/* * Pseudo Class */

/* li:first-child {
  font-weight: bold;
} */

li:last-child {
  /* font-style: italic; */
  margin-bottom: 0;
}

/* li:nth-child(2) {
  color: red;
}

li:nth-child(odd) {
  color: greenyellow;
} */

/* *Misconception in Pseudo Class: In Pseudo class the first child is always selected in this case the header will be the first child class.*/

/* article p:first-child {
  color: red;
} */

/* article p:last-child {
  color: red;
} */

/* *Styling Links (L[:link], V[:visited], H[:hover], A[:active])*/

/* *It's not a Good Practice */
a {
  /* color: #1098ad; */
  cursor: pointer;
}

a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* color: #777; */ /* *Generally we don't do that */
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  /* text-decoration: underline dotted orange; */
  text-decoration: underline orange;
}

a:active {
  background-color: greenyellow;
  font-style: italic;
}

/* *Descendant + Pseudo(LVHD) */

nav a:link {
  /* background-color: #eee;
  margin: 20px;
  padding: 20px;

  display: block; */
  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;
  /* text-align: center; */
}

/* *Descendant + Pseudo(LVHD) + Pseudo(LVHD) */

nav a:link:last-child {
  margin-right: 0;
}

/* *Resolving Conflicts */

/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */

/* * Styling using Inheritance and universal selector */

/* -> Here the body replaces all the selectors with the given selector if there is no specific overriding selector. */

body {
  color: #444;
  font-family: sans-serif;
  /* margin: 0; */

  /* Note: border-top: 10px; Here this does not inherit */

  border-top: 10px solid #1098ad;
  position: relative;
}

/* nav a:link,
nav strong {
  font-size: 18px;
} */

/* 
nav {
  font-size: 18px;
} */

/* ----> Universal Selector = this does not inherit but it apples on all selector(this has the least priority)*/

* {
  /* border-top: 10px; */
  margin: 0;
  padding: 0;
}

/* ----> Pseudo Elements <---- */
/* # Pseudo class(:), Pseudo Element(::) */
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* h2::first-letter {
  font-size: 80px;
} */

/* ----> Adjacent sibling selector <---- */
/* header + p {
  color: red;
  font-weight: bold;
} */

/* ----> Adjacent sibling selector + Psuedo Element <---- */
/* h3 + p::first-line {
  color: red;
} */

/* ----> After and Before Pseudo element <---- */
/* 
  # ::before is used to place it at the beginning of the element, 
  # ::after is used to place it at the end of the element
*/
h2 {
  /* background-color: orange; */
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* ---> Debugging Tutorial <--- */

/* .main-header nav a:link {
  color: red;
  margin-top: 100px;
} */

